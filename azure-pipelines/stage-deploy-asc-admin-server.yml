name: Stage-Deploy admin-server

variables:
- group: azure-environment

parameters:
- name: spring_cloud_name
  default: $(SPRING_CLOUD_NAME)
- name: resource_group
  default: $(RESOURCE_GROUP)
- name: application_name
  default: "admin-server"
- name: service_connection_name
  default: $(SERVICE_CONNECTION_NAME)
  
trigger: none

pool:
  vmImage: 'ubuntu-20.04'

resources:
  pipelines:
  - pipeline: build_from_github
    source: Build
    trigger: none

stages: 
- stage: deploy_staging
  displayName: Staging Deployment
  jobs:
  - job: deploy_staging
    displayName: Staging Deployment
    steps:
    - download: build_from_github
      artifact: build
        
    - task: AzureCLI@2
      name: deploy_to_staging
      displayName: Staging Deployment
      inputs:
        azureSubscription: ${{parameters.service_connection_name}}
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add -n spring-cloud -y

          Write-Host "Removing inactive deployments..."
          $inactiveDeployments =  az spring-cloud app deployment list  -s '${{parameters.spring_cloud_name}}' -g '${{parameters.resource_group}}' --app '${{parameters.application_name}}' | ConvertFrom-Json |  Where-Object { !$_.properties.active} | Select -Expand name
          $inactiveDeployments | %{  az spring-cloud app deployment delete -s '${{parameters.spring_cloud_name}}' -g '${{parameters.resource_group}}' --app '${{parameters.application_name}}'  -n $_ --verbose }

          $jarPath=(dir $(PIPELINE.WORKSPACE)/build_from_github/build/*${{parameters.application_name}}*.jar | select -Expand FullName)
          echo 'Deploying ${jarPath}... as ${{parameters.application_name}}'
          echo 'Creating deployment d$(Build.BuildId)...'

          az spring-cloud app deployment create -s '${{parameters.spring_cloud_name}}' -g '${{parameters.resource_group}}' -n 'd$(Build.BuildId)' --app '${{parameters.application_name}}' --jar-path $jarPath --skip-clone-settings

- stage: move_to_production
  displayName: Move to Production
  jobs:
  - job: move_to_production
    displayName: Move to Production
    steps:
    - task: AzureCLI@2
      name: move_to_production
      displayName: Staging Deployment
      inputs:
        azureSubscription: ${{parameters.service_connection_name}}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add -n spring-cloud -y
          echo "Currently active deployment: ${previouslyActiveDeployment}"
          az spring-cloud app set-deployment --deployment 'd$(Build.BuildId)' --resource-group '${{parameters.resource_group}}' --service '${{parameters.spring_cloud_name}}' --name '${{parameters.application_name}}' --verbose
          echo 'New active deployment: d$(Build.BuildId)'

